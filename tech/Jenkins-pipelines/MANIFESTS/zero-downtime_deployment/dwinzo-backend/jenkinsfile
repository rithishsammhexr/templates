pipeline {
    agent {
        label 'remote-server-agent'
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'commit', value: '$.after'],
                [key: 'author', value: '$.commits[0].author.name']
            ],
            causeString: 'Triggered by commit on $ref by $author',
            token: 'dwinzoOrgDwinzoBackend',
            printContributedVariables: true,
            printPostContent: true,
            regexpFilterText: '$ref',
            regexpFilterExpression: '^refs/heads/main$'
        )
    }

    environment {
        GIT_CREDENTIALS = credentials('rithishsamm')
        DOCKER_COMPOSE = 'docker-compose'
        APP_NAME = 'Dwinzo/Dwinzo-Backend'
        MAIN_CONTAINER = 'DwinzoApi_end'
        DB_CONTAINER = 'mongo-Dwinzocontainer'
    }

    stages {
        stage('Source') {
            steps {
                cleanWs(deleteDirs: true, disableDeferredWipeout: true)
                script {
                    powershell '''
                        Write-Host "Starting source checkout..."
                    '''

                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: 'http://185.100.212.76:7776/Dwinzo/Dwinzo-Backend.git',
                            credentialsId: env.GIT_CREDENTIALS
                        ]]
                    ])

                    powershell '''
                        Write-Host "Source checkout completed successfully"
                        dir
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    powershell '''
                        Write-Host "Building Docker images..."
                        $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
                        docker-compose build --no-cache
                        dir
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    powershell '''
                        Write-Host "Cleaning up old containers if they exist..."

                        # Stop and remove main app container if exists
                        $mainExists = docker ps -a -q -f "name=$env:MAIN_CONTAINER"
                        if ($mainExists) {
                            Write-Host "Stopping and removing main container: $env:MAIN_CONTAINER"
                            docker stop $env:MAIN_CONTAINER
                            docker rm $env:MAIN_CONTAINER
                        } else {
                            Write-Host "Main container not found, skipping removal."
                        }

                        # Stop and remove database container if exists
                        $dbExists = docker ps -a -q -f "name=$env:DB_CONTAINER"
                        if ($dbExists) {
                            Write-Host "Stopping and removing DB container: $env:DB_CONTAINER"
                            docker stop $env:DB_CONTAINER
                            docker rm $env:DB_CONTAINER
                        } else {
                            Write-Host "Database container not found, skipping removal."
                        }

                        Write-Host "Listing existing containers after cleanup:"
                        docker ps -a
                        dir
                    '''

                    powershell '''
                        Write-Host "Starting deployment with Docker Compose..."
                        $env:COMPOSE_CONVERT_WINDOWS_PATHS=1
                        docker-compose up -d --build

                        Start-Sleep -Seconds 10

                        # Verify both containers are running
                        $mainContainer = docker ps -q -f "name=$env:MAIN_CONTAINER"
                        $dbContainer = docker ps -q -f "name=$env:DB_CONTAINER"

                        if ($mainContainer -and $dbContainer) {
                            Write-Host "✅ Application deployed successfully!"
                            Write-Host "Main Container ID: $mainContainer"
                            Write-Host "Database Container ID: $dbContainer"

                            Write-Host "Main Container Logs:"
                            docker logs $mainContainer

                            Write-Host "Database Container Status:"
                            docker container inspect $dbContainer --format '{{.State.Status}}'
                        } else {
                            if (-not $mainContainer) {
                                Write-Error "❌ Main application container ($env:MAIN_CONTAINER) not found"
                            }
                            if (-not $dbContainer) {
                                Write-Error "❌ Database container ($env:DB_CONTAINER) not found"
                            }
                            exit 1
                        }

                        Write-Host "Currently running containers:"
                        docker ps
                        dir
                    '''
                }
            }
        }
    }

    post {
        success {
            powershell '''
                Write-Host "✅ Pipeline completed successfully!"
                Write-Host "Build Number: $env:BUILD_NUMBER"
                Write-Host "Workspace: $env:WORKSPACE"
                Write-Host "Triggered by commit: $env:commit"
                Write-Host "Author: $env:author"
            '''
        }
        failure {
            powershell '''
                Write-Host "❌ Pipeline failed!"
                Write-Host "Please check the logs for details"
                Write-Host "Triggered by commit: $env:commit"
                Write-Host "Author: $env:author"
                Write-Host "Container status:"
                docker ps -a
            '''
        }
        always {
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}